ARRAY DESTRUCTURING
- Destructuring is a feature, that allows to unpack values of an array in differrent variables. In general, this lets us break a complex data structure down in smaller pieces.
- To destructure an array we declare an array, then we declare the destructuring assignment, like this: 'const [a, b, c] = arr'. a, b and c will become the elements of an array, and we can freely use them, as if they were regular variables.
- With DA we can access different elements of an array, without minding their order. Example: if we have an array with five elements, and we want to access element 0 and 4, we write the DA like this - 'const [element0, , , element4] = arr'. This will automatically skip the missing elements and get us only the ones we need.
- The DA can have access to elements that are not in the array, which will be 'undefined'.
- Destructuring makes it possible to switch the variables order without using the temporary variables. To do that we declare the DA with 'let' then we reassign it, switching the order of the variavles, like so: '[first, second] = [second, first]'.
- Destructuring allows us to extract as many values out of a function or method. If it returns an array, we simply destructure it into multiple variables and then use them as regular ones.
- We can use nested destructuring to extract values from nested arrays like so: 'const [a, b, [c, d]] = arr[1, 2, [3, 4]]'.
- You can set default values to destructured variables, when you do not lnow the length of an array. This will make the destructured variables that point to nonexistent array elements get default value, instead of 'undefined'. Example: 'const [i = 'def', k = 'def', j = 'def'] = [10, 20]', the j value will be 'def' not undefined. Default value can be anything.

OBJECT DESTRUCTURING
- Object destructuring allows you to unpack specific values of object properties as variables. We create a variable list using '{}' in which we add variables with exact same names of object properties, that we want to extract. Example: 'const {firstName, age, gender} = object'.
- We can give individual names to the object variables, to make them more distinct from object properties names. Example: 'const {firstName: personName, age: personAge, gender}'. We then use new variable names when we need to use them.
- Object destructuring is a very powerful tool that is often used to extract values from API' calls, which usually come as objects.
- You can give default values for destructured object variables in case you do not know which properties will present on an object. Example: 'const {height = 'def', firstName = []}'.
- You can mutate the variable value to the object variable value, using OD. Example: 'let a = 1, b = 2; const obj = {a: 10, b: 20,}; ({a, b}) = obj'. In this case a and b values will mutate to 10 and 20. The usage of braces is required, since we can't evaluate a block to anything.
- Object destructuring can be used to send an object as a function argument, by destructuring it's properties in individual variables and then using them in the function. To do that, we pass object with object exact property names and then we use then in the function body as regular varaibles.

SPREAD OPERATOR
- Spread operator allows us to include elements from whole array, with a single use of operator instead of looping or manual adding. Syntax example: 'arr1 = [1, 2, 3]; arr2 = [...arr1, 4, 5]'. This will include all the array elements from the first array in any place of another array.
- Another usage of spread operator is to pass multiple values into function, by passing an array with '...' before it. Basically, when we need array elements individually divided by commas we use spread operator. Usually when we unpack an array or pass arguments to the function.
- While spread is similiar to array destructuring, the difference is that spread takes ALL elements from an array in order and it doesn't create new variables.
- Spread works on all 'iterables'. Iterables in JS are arrays, strings, maps and sets, but NOT objects. We can use it to divide string into array of it's individual symbols or add symbols to string-array.
- From ES 2018 spread also works on objects. It can be used to make shallow copies of objects or create new objects based on the already existing objects.

REST PATTERN AND PARAMETERS
- Rest pattern has the same syntax as spread operator - '...'. But it does the opposite thing: it takes individual elements and forms an array out of them. When spread operator is used AFTER the '=' operator, usually when we add new elements to another array, rest pattern used BEFORE the '='. It takes remaining elements of one array and forms another array with them. This is used in destructuring.
- Rest pattern DO NOT include any items that were skipped by destructuring. It will only include remaining items, which is why it ALWAYS should be placed in the end of the destructuring assignment.
- There should be only one rest pattern in each destructuring assignment.
- Rest works with object destructuring as well. We can select some properties as individual variables and the rest will be combined with rest pattern.
- You can use rest to make fuctions with any given number of arguments. We simply include one rest parameter as function argument, like this - 'function sum (...numbers)'. After we pass the multiple arguments to function, rest will create an array out of them. Function then runs through array and performs the needed operation.
- We can pass array to function as individiual elements, using spread, and then put them in the array with rest pattern inside the function body.

SHORT CIRCUITING (&& AND ||)
- We can use logical operators '||' and '&&' with non-boolean values. And the returned value of these operators might be not boolean as well.
- Shot circuiting is a feature whrere JS breaks the process of checking the values of logical operators and IMMEDIATLY returning the the first one that matches the condition. Example; 'const bool = (3 || 'Petr')' will be '3', because - 1. '3' is a first truthy value of them, therefore '||' operator returns it without even checking the rest. 2. The '||' operator can return non-boolean values.
- SC on '||' can be used to set default values much easier. Example: 'const guests1 = restaurant.numGuests || 10' If 'numGuests' property exists and has a value, it will be assigned to the 'guests1' variable. If it doesn't exist, '10' will be given instead.
- In short, SC on '||' operator returns either first truthy value or last falsy value, while preserving it's data type.
- SC on '&&' does the same thing, but works in opposite way - it stops checking the values of logical expression, if it meets the falsy value.
- SC on '&&' will return first falsy value or last truthy value, preserving the type of the value. It can be used instead of single 'if' statement. Example: 'restaurant.orderPizza && restaurant.orderPizza('mushrooms', 'tomato')' '&&' initially checks if method exists, and if so, calls it with needed parameters. If it doesn't exist, it will not be called.
- Short circuiting is a good tool, but it should be used with modertaion, because it makes code readability worse.
