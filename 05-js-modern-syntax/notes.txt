ARRAY DESTRUCTURING
- Destructuring is a feature, that allows to unpack values of an array in differrent variables. In general, this lets us break a complex data structure down in smaller pieces.
- To destructure an array we declare an array, then we declare the destructuring assignment, like this: 'const [a, b, c] = arr'. a, b and c will become the elements of an array, and we can freely use them, as if they were regular variables.
- With DA we can access different elements of an array, without minding their order. Example: if we have an array with five elements, and we want to access element 0 and 4, we write the DA like this - 'const [element0, , , element4] = arr'. This will automatically skip the missing elements and get us only the ones we need.
- The DA can have access to elements that are not in the array, which will be 'undefined'.
- Destructuring makes it possible to switch the variables order without using the temporary variables. To do that we declare the DA with 'let' then we reassign it, switching the order of the variavles, like so: '[first, second] = [second, first]'.
- Destructuring allows us to extract as many values out of a function or method. If it returns an array, we simply destructure it into multiple variables and then use them as regular ones.
- We can use nested destructuring to extract values from nested arrays like so: 'const [a, b, [c, d]] = arr[1, 2, [3, 4]]'.
- You can set default values to destructured variables, when you do not lnow the length of an array. This will make the destructured variables that point to nonexistent array elements get default value, instead of 'undefined'. Example: 'const [i = 'def', k = 'def', j = 'def'] = [10, 20]', the j value will be 'def' not undefined. Default value can be anything.

OBJECT DESTRUCTURING
- Object destructuring allows you to unpack specific values of object properties as variables. We create a variable list using '{}' in which we add variables with exact same names of object properties, that we want to extract. Example: 'const {firstName, age, gender} = object'.
- We can give individual names to the object variables, to make them more distinct from object properties names. Example: 'const {firstName: personName, age: personAge, gender: personSex}'. We then use new variable names when we need to use them.
- Object destructuring is a very powerful tool that is often used to extract values from API' calls, which usually come as objects.
- You can give default values for destructured object variables in case you do not know which properties will present on an object. Example: 'const {height = 'def', firstName = []}'.
- You can mutate the variable value to the object variable value, using OD. Example: 'let a = 1, b = 2; const obj = {a: 10, b: 20,}; ({a, b}) = obj'. In this case a and b values will mutate to 10 and 20. The usage of braces is required, since we can't evaluate a block to anything.
- Object destructuring can be used to send an object as a function argument, by destructuring it's properties in individual variables and then using them in the function. To do that, we pass object with object exact property names and then we use then in the function body as regular varaibles.

