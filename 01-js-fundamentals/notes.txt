WHAT IS JAVASCRIPT
- JavaScript is high-level, object-oriented programming language that ismainly used for web-development.
- JavaScript gets updated every year. Current biggest update is 2015 version ES6.

LINKING A JAVASCRIPT FILE 
- When adding JS logic to the website we can directly include it into the HTML file, by adding <script> tag inside <head> and writing the code inside this tag. Thi method is called 'inline'. It is good for not including extra file, but it doesn't separate JS from HTML which is not wanted for clear code.
- We can make a separate file for JS code and then link it by adding an empty script tag at the end of the <body> and specifying the location of the script file using 'src' attribute. 

VALUES AND VARIABLES
- Value is a smallest piece of information. It can be a number, letter word or string of words. We can interract differently with values, for example, logging them into the console or use mathematical operations on them.
- The core value operation is assingnment, by which we can store a value inside the variable and have access to it.
- To declare a variable we use 'let' keyword after which we specify the variable name (written in lower camel case) and then we assign a value to the variable. Numerical value can be written as it is, text value is enclosed in quotes.
- A constant value, like PI number should have varaible named in all caps, like 'let PI' rather than 'let Pi'.
- Variable names should be descriptive, to make it easy to understand which value does it hold.

DATA TYPES
- in JavaScript there are two types of values - objects, which are values that have multiple values on it's own, and primitives, which hve only one specific value. There are seven primitives.
- Number. For both inegers and decimals. let age = 18;
- String. Sequence of characters, used for text. let firstName = 'petr';
- Boolean. Only 'true' or 'false', used for decision making. let fullAge = true;
- Undefined. Value of yet undefined variable. let children;
- Null. Means 'empty value'.
- Symbol (ES2015) - unique value that can't be changed.
- Bigint (ES2020) - Stores larger numbers than Number type can hold.
- JavaScript has dynamic typing, which means that you don't need to manually define the data type of a value which variable will store. Instead the type is determined automatically.
- In JavaScript VALUES have the type, not VARIABLES.
- 'typeof' operator can be used to print the type value of a variable or just value as a string.
- To change the value of a variable, we simply assing it to the variable. We do not need to use 'let' keyword again.
- There is a JavaScript language bug, regarding typeof null. If we try to console.log typeof null, it will say that it's type is 'object', rather than 'null'.

LET, CONST, VAR
- The proccess of assigning a new value to the variable is called 'mutating' a variable.
- let keyword creates a variable, that can be changed at any point of the program.
- const keyword is used, to create a variable that cannot be reasigned. When using const we always need to initialize it with some value.
- To make clean code, using const whenever possible is required. Let should only be used in cases when you know for certain that value of the variable will change.
- var keyword is kinda same as let, but it's rarely used.

OPERATORS IN JAVASCRIPT
- JavaScript has all of the basic mathematical operators, with addition of some unique ones.
- '**' operator is power operator. 2 ** 3 = 8, which is 2 in power of 3.
- '+' operator is used not only for adding numbers, but also fo string concatination, which is adding multiple strings of text together. String concatenation is a powerful JavaScript tool. We can cocatenate both text strings, empty strings and special symbols.
- '=' is an assingnment operator. It's usually used for assingning values to the variable.
- For compiler to know which operations to execute first, operator precedence system is made. Each operator has it's own priority number, operators with higher priopity are executed first.

CODING CHALLENGE N1
- When learning, you can use const whenever, even if tha variable can be change in general, it is okay, as long as it doesn't change in the scope of your program.

STRINGS AND TEMPLATE LITERALS
- Second method of forming strings is called template literals, which allows us to write a string in a normal way and then inserting the variables inside of it.
- To make a template literal we enclose the string in backticks. It's syntax is such: `text ${variable}`;.
- We can write text-only strings using backticks, instead of quotes. This is useful, since if we need to add variables or quotes inside the string we do not need to add or change quotes.
- To make multiline strings backticks are better, since you don't need to include '\n' escape sequence rather than just pressing Enter.

DECISION MAKING
- String literals are supreme!

TYPE CONVERSION AND COERCION
- Since JavaScript is dynamically typed language, we can and often should manipulate the data types of different values to make the program work as expected. This is called 'type conversion' and usually is done manually. For example, if user types the age of his birth, the value is set as a string. So for us to make mathematical operations with it, we need to first convert string to a number.
- In this case, we can use 'Number()' function.
- NaN (stands for 'Not a number') is a special number, that is produced when operation with numbers couldn't produce another number.
- To convert number into string we use 'String()' function. Function names always start from capital letter.
- JavaScript can convert only 3 types: booleans, numbers and strings. In some cases, certian values of one type cannot be converted into another type.
- Another way of changing types is called 'type coercion'. JavaScript compiler automatically changes the types of values that are conflicting to form a complete result.
- This process is often done when both string and numbers are included. For example, when we concatenate strings and numbers, numbers will aoutomatically turn into strings.
- Code examples: ('string' + 1) = string1 (type is string); ('10' - '1' - 2) = 7 (type will be number, NOT string).
- In general, when strings and numbers are together in one expresiion, '+' will count as concatenation operator and will turn numbers into strings. But operators '/', '*' and '-' will turn numerical string into actual numbers and perform the mathematic operations on them.

TRUTHY AND FALSY VALUES
- Falsy values are the ones that are not exactly false, but will become false if we convert them to boolean.
- There are 5 falsy values in JavaScript: 0, '', undefined, null, NaN. 'false' is the original boolean false value.
- Almost always falsy and truthy values convert into boolean value automaticaly, through type coersion.

EQUALITY OPERATORS
- In JavaScript there are two equality checking operators: '==' loose equality operator, which does type coersion, and '===' strict equality operator, which doesn't do type coersion.
- Examples: 18 == '18' will result in 'true' since '==' operator converts number to string. But 18 === '18' will give you 'false' since '===' doensn't convert the types.
- In general, loose equality operator is almost never used, to avoid unclear bugs. For clean code, try to always use strict equality operator.
- To check whether the value is NOT equal to something, we use inequality operator. Same as equality operators, there are two versions of inequality operator: '!=' loose inequality and '!==' strict inequality. The last one is preferable.

BOOLEAN LOGIC AND LOGICAL OPERATORS
- Three boolean operators are '||' or, '&&' and, '!' not.
- We use this operators in complex decision making, when there are multiple rules to be met.
- In general, when '&&' is used, even one false value will result in false. When '||' is used even one true value will result in true.

SWITCH CASES
- Switch case is an another method to compare different values, similar to else if structure, but with less code.
- Alwsys put break at the end of each switch case, otherwise code will continue to execute.
- Switch case does strict comparison, so it will not work desirably if input data is somewhat incorrect.

STATEMENTS AND EXPRESSIONS, TERNARY OPERATOR
- Expression always produces a value, statement doesn't produce a value.
- In some code constructions JavaScript only expects an expression not a statement to be placed. For example, in template literals we can only place expressions, not statements.
- Ternary operator can be used istead single if\else block.
- Since it's an operator, it will produce a value, thus we can use ternary operator to assign one of two values to one variable.
- Ternary operator can be inserted right into template literal.

JAVASCRIPT RELEASES
- When developing a javascript project, use a latest  version chrome browser to access latest javascript features.
- When shipping the final version of the product, Babel can be used to transpile the code base to the ES5 standarts.

JAVASCRIPT STRICT MODE
- Strict mode allows us to write safer JS code and avoid some bad practices automatically. To activate it, simply add 'use strict' string at the very beggining of the code file. This mod should always be enabled.

FUNCTIONS
- Functions are a fundamental concept of JavaScript. In general, we use functions to repeat certain pieces of code multilie times. Function syntax is such: 'function name(parameter block) {declaration block}'.
- To receive the end result of function working, we assign the function call to a variable.  This way, the returned value of the function will be the value of the variable, with which we can interract.
- When function is made to make a singular calculation, we do not need to store the result of it in the separate vaiable, instead we can simply return the result of calculation.
- There are two ways of declaring a function in JavaScript. We can use a function keyword with a name, which is function declaration or we can assign function body without a name to a variable and referr to that variable as if it was a function. This method is called function expresion.
- The difference between these methods is that you can call the function declaration before you write it in the code, but you can't do that with a function expression.

ARROW FUNCTIONS
- Third way to declare a function is so called 'arrow function'. It has a shortened syntax: const functionName = parameter => returned value (must be a single string). When arrow function only has one line of code the return value is calculated implicitely, meaning that we do not need to add return keyword. But if the calculation of returned value has multiple lines of code, we need to explicitely write return.
- Arrow functions are good to write short one-line functions, but they are same as bsaic functions, when they have multiple lines of code.

FUNCTIONS CALLING OTHER FUNCTIONS
- We can call other functions inside the bodies of another to better decompose our code.
- Parameters of different functions can have the same name, this woun't result in any conflict since function parameters can be treated as local variables.
- Functions are expressions therefore to print the result of function working we can simply log the function with needed parameters with console.log. It's not always neccecary to store the returned value of a function in a separate variable.

ARRAYS OVERVIEW
- Arrays are a common data-structure that can be seen as a list of data pieces that we can access separatly. Each array starts from 0.
- Arrays can be mutated if initialized with 'const', however they cannot be completely changed, for this they should be initialized with 'let'.
- Arrays can hold multiple types of values, like whole function calls and different types of data at the same time.
- To interract with arrays, JavaScript has a lot of built in methods, for example, 'push' will add an element to the end and 'unshift' will add an element to the beggining of an array.
- Methods are expressions therefore they produce a value, value of 'push' and 'unshift' will be the new lenghth of an array. We can log this value.
- There are seweral methods to check wether the given element exists in array or not. 'includes' method gives boolean value wether given element is in the array or not. This method uses strict equality.
- 'includes' method is often used in 'if' statements, since it produces booleans.

INTRODUCTION TO OBJECTS
- Objects are a data structure that is similar to arrays in a way that it also stores multiple data pieces, but objects have couple of key differences.
- There are multiple ways of making an object in JavaScript, first is called 'literal' whnen we write the contents of an object ourselves.
- Syntax of object-literal way: const objectName {propertyName: property, propertyName: property};.
- The biggest difference between objects and arrays is that in arrays order of the data matters a lot, because we retreive the information from an array via element order number. But in object the order of the data doesn't matter. So in general, objects are used more for unstructured data and arrays are used for ordered data.

GETTING DATA FROM AN OBJECT
- There are two ways of taking data from an object: dot notation(object.propertyName) and bracket notation(object['propertyName']). 
- Difference between theese methods is that we can isert any expression into the bracket method while in dotted method we can only state an existing property name.
- Bracket method is very handy when we take property name as an iput from a user and store it in some variable. To access the property value of an object we use bracket notation where we state the variable name where property name is stored.
- 'length' property can be used for counting the number of symbols in a string AND to count a number of entries in an array.

OBJECT METHODS
- Object method is a function that has been defined iside the object. The syntax of object method is similiar to function expression.
- 'this' keyword is used to point at a certain object property. This is used in object methods to take some value directly from an object rather than passing this value externally.
- 'this' keyword can also be used to create new properties.
- If object method creates a property inside the object, to access this property we either need to call the method first, so the property is created and then interract with said property or we make the method return that property and call the method directly.

LOOPS. FOR LOOP
- Loops are a special group of statements that are used to repeat a certain task for specific amount of iterations, which is defined by the condition.
- Syntax of 'for' loop: for(let i = 1; i <= 10, i++) {}. While the condition of the loop is true, it will execute the operation in it's body. This loop can be used for going through arrays or printing multiple lines of text.
- We can also fill the arrays with data by using for loop. We can either assign the the value of current index to the needed array or we can use 'push()' function.
- To make a condition to loop through array that won't be hardcoded we use array.legth property.
- To loop through array backwards we set the iterator to arrray.length - 1 and substract it until it is lesser than 0.
- We can make a loop inisde loop to get meltiple iterations of inner loop within one iteration of outer loop. This is useful when looping through the array of arrays.

LOOPS. BREAK AND CONTINUE
- 'break' and 'continue' are two loop operating keywords. 'continue' skips the curent iteration of a loop and starts next one. Can be used to conditionally skip some iterations. 'break' immediately exits the loop on a current iteration. This is used to terminate loops at the specific point. 

LOOPS. WHILE LOOP
- Second type of loop is 'while' loop, which needs to have a condition and while this condition is true, the loop runs.
- 'while' loop is more versatile than 'for' loop because it only needs condition. This loop can be used in cases when the counter isn't present.
- When making an array inside loop from the newmade data we simply use '.push' method without the inclusion of iterator.