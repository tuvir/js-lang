JS HIGH-LEVEL OVERWIEV
- High-level: layer of abstractions that allow developers to not manually work with memory.
- Garbage collection: a process which cleans the unused memory automatically.
- Interpreted (JIT compiled): JS program automatically converts to machine code, via JS engine.
- Multi-paradigm: you can use multiple approaches when writing code in JS, like OOP pr procedural.
- Prototype-based object-oriented: simply - everything which isn't primitive value is an object. When we make an object, it has a prototype, object has all it's methods inherited from that prototype.
- First-class functions: all JS functions can be treated as regular variables and have the behavior and the usage of variables.
- Dynamically-typed: when creating a variable in JS we don't state which type of data will variable hold. Instead, JS automaticaly figures the type base on the variable value. 
- Single-threaded with non-blocking event loop: simply: JS has only one thread of instructions to cpu. For that thread not to block, non-blocking event loop is utilised, which allows certain proccesses to be executed in the background and stick in thread once they are done.

JS ENGINE AND RUNTIME
- JS engine is a program that executes the JS code. Most browsers have their own engine, the most popular one is Chrome' V8. It also powers Node JS.
- Each engine has 2 memory modules: call stack and heap. Call stack is a structured place where code instructions are being executed with execution contexts. Heap is an unstructured memory pool that stores all objects needed for our program.
- Types of code execution: compilation: source code traslates to machine code and stores in executable file. Program starts when file is executed. Interpretation: code is being executed line by line while converting to machine code at the same time. Pretty slow. Just-in-time compilation: entire code of the program is being converted to machinde code at once, but without the separate file, instead, it's executes immediately.
- Working of JS engine
- 1. Parsing the code: reading the code and plasing it in AST(abstract syntax tree) in ordered and structured way. Each JS keyword is being translated into meaningful way the placed into AST. AST is then used to generate machinde code.
- 2. Compilation: AST is getting compiled to machine code, without making the separate file for it.
- 3. Execution: machine code gets executed. This happens in the call stack.
- 4. Optimization: machine code generated at first can be slow, which leads to it recompiling, then replacing the previous code, then executing. This allows the program to start running as fast as possible and then getting optimised on the go. All oof this happens on different threads which cannot be accessed from main thread.
- JS runtime
- Browser runtime is kinda a big box, which stores all JS related stuff. Engine, web APIs and callback queue.
- APIs are not part of JS but they are getting provided to engine, and are accessible on window object.
- Callback queue is a data structure that contains all executed functions in order, including all the event listeners functions. After an event occurs, callback function is getting called and put into callback queue. When call stack gets empty, function gets placed in the stack to be executed.
- Event loop is what doing all of this: it takes functions from callback queue and puts them in stack, where they get executed.

EXEC CONTEXTS AND CALL STACK
- Execution context (EC) is an environment where some piece of code is executed. This environment also stores all nessesary information for code execution like arguments passed to the function or local variables.
- Immediately after compilation, code execution starts. Firstly, the global execution context is being created. This context includes all the top level codee like variable and function declarations or top level function calls. Basically, all the code that is not inside the function.
- After the global EC is created it's being executed right away. CPU processes machine code that it receives from global EC.
- When global EC has finished executing, the execution of funcitons begins. For each function call, separate EC is created, which stores all information for the function to run. This is also happens to methods.
- All these EC are forming the call stack. After all these function are done executing, the call stack is empty and the engine will be waiting for new function calls to be pushed in call stack and executed, for example, event handler functions. These callback functions are provided by event loop of js.
- EC inside
- 1. Variable environment: let, const, var declarations; functions; arguments object.
- 2. Scope chain. Need for functions to get access to variables outside the function scope.
- 3. 'this' keyword.
- All of this is generated during 'creation phase', right before the execution.
- Arrow function ECs do NOT include 'this' and arguments object.
- Arguments object is an array-like structure that contains all the argumentas in order. This is not avaliable for arrow functions.
- Working of Call stack
- Call stak is a 'place' where all ECs are being stored. The very top EC will be excuted first, then, it will be removend and the EC after it will start excuting. This queue allows engine to know where it is in the excution.
- Each function call creates new EC fo the called function. This EC is being placed on top of the call stack. If a function has a function call inside it's body, the execution of first function will be paused, whe second inside function is being called. First function will continue executing when the inside one will return the value.
- When function returns the value, it's EC, which is on top, will be removed (popped) from memory, making the bottom EC the top one, therefore, it will start executing.
- Global EC will be created first, which will make it to stay in the very bottom of the call stack, even after the program 'finishes'. Global EC is only removed when user closes the browser or browser tab.

SCOPING AND SCOPE CHAIN
- Scoping is a concept that tracks where program's certain variables are located and how they are structured. It also determines where we have access to certain variables and where not.
- Lexical scoping: JS method of scoping. Scoping is controlled by placaement of functions and code block inside the program code. Example: global variables will be accessible by all functions, while variable initialised inside the function body will only be accessible inside the function.
- Scope: space in code where certain variable is declared. For functions it will be variable environment. There is global scope, function scope, block scope.
- Variable scope: code section or block iside which the certain variable can be accessed.
- Global scope: any variable that is declared outside of any function resides in global scope, therefore, it can be accessed in any poin of the program.
- Funciton scope: variable declared INSIDE the function body are only accessible inside the funciton. Also called 'local scope'.
- Block scope (ES6): variables are only accessible inside the block with '{}' (like if statement). This applies ONLY to 'let' and 'const'. functions are also block-scoped, in strict mode.
- Current scope will have access to variables inside it's 'parent' scope. Example: if we declare a function inside global scope, the function scope will have access to the global 'parent' scope variables, if they are needed.
- Scope chain: basically, a process that check, whether the parent scope of current scope has the access to variables that are needed to current scope. If it has it, the function will proceed, otherwise, an error will occur. This process is called 'variable lookup'.
- Variable lookup only works 'upwards', from child scope to parent scope. The parent scope will NEVER have access to child scope variables.
- If we have multiple code blocks inside one parent scope, 'siblings' scopes will NOT have access to variables of one another. 
- Global scope variables are stored in global EC variable environment at the beggining of program execution.
- SCope chain is an order in which functions are written in the code, but it has nothing to do with order in which functions were CALLED (call stack).

SCOPING IN PRACTICE
- It's handy to imagine scopes as boxes that can have other boxes inside them or themselves are inside the boxes. If a scope is inside the other scope, it has access to the outer variables, but outer scope doen't have access to it.
- If, for some reason, you need to extract a variable value from inner block scope, you have to use var when declaring this variable. 'var' is function scoped, not block scoped, whichmeans that it will be accessible from inner block. This is not proper technique however.
- If we turn off strict mode, the functions become function scoped, instead of block scoped, which allows to extract the function returned value even if it is inside of a block. But strict mode should be used ALWAYS.
- THe working of scope allows to create multiple variables with same name, as long as they are placed in different scopes. For example, if we have two variables with same name, but different values, one in GS and one in FS, and function needs the variable, it will simply take it's own scope variable, instead of chainig to GS. This is also why we can have funcitons with same parameter names.
- Other way to change variable value is through reassigning it. We can reassign variables that are in the same or outer scopes.

VARIABLE ENVIRONMENT
- Hoisting is a process which makes some types of variables accessible before their declaration in the code. They are kinda moved to the top of the code block, even when they are lower than their usage occurences.
- The hoisting happens during EC 'creation phase' when code is scanned for variable declarations and for each variable a new property is being added to the variable environment object.
- Funciton declarations: FDs are hoisted, which means that they can be called before they get defined in the code. Their initial value will be the actual function.
- 'var' variables: Hoisted, but their initial value will be 'undefined'. This is a source of bugs, so we dont use var.
- 'let' and 'const' variables: Practically not hoisted, their initial value is set at 'unitialized', and they are placed in TDZ (temporal dead zone). So, if we try to use 'let' or 'const' declared variable before its actual declaration we get an error.
- Arrow and expression functions: depends on type variable declaration. If using 'let' or 'const' - practically not hoisted. This is why we declare functions of these types before we use them in the code.
- TDZ was intoduced to actively avoid variable usage before declaration, by giving an error in this case. TDZ represents the lines of code ABOVE the variable declaration, inside it's local scope, where variable cannot be used.
- Second reason of TDZ is to make 'const' variables work. It should be impossible to first assign 'unitialized' to const and then give it it's real value.
- Hoisting makes code more readable through function declarations.

HOISTING AND TDZ IN PRACTICE
- When declaring arrow functions or function expressions with 'var', and the use these functions before their initialization, the program will treat them as 'undefined' because of hoisting, which will lead to an error.
- List of best codewriting practices for JS: 1. Don't use 'var'. 2. Use 'const' whenever possible, 'let' only when variable will change. 3. Declare funcitons before their usage.
- Variables declared with 'var' create a property on window object, which can lead to bugs.

THIS KEYWORD
- 'this' keyword/variable is a special variable that is created for every execution context. This variable takes the value of (points to) the 'owner' of the function in which 'this' keyword is used.
- 'this' variable value is not static. It depends on the way function was called and is declared only when the function gets called.
- Method call: 'this' will point to the object which calls the method. Example: we create an object which has birth year. Iside this object we create the method, which takes the object year property using 'this' keyword, like that: '2023 - this.birthYear'. When we call the method on an object this keywords simply gets replaced with object name, giving the access to it's properties. This is a good way to make reusable code.
- Function calls: in strict mode 'this' will be 'undefined'. Without the strict mode it will point to global window object, which is not good.
- Arrow functions: they DO NOT get their own 'this' keyword. Instead, they will pickup 'this' from the upper or 'parent' function scope, which is called 'lexical this'. This can lead to some hard bugs, so remember it for good!
- Event handler functions: 'this' will point to the DOM element on which the handler is attached to.
- 'this' doesn't point to function itself, nor does it point to the variable environment of the current function.

THIS KEYWORD IN PRACTICE
- WHen we declare a method on object we can create another object of similiar structure and then simply borrow the previously created method from first object, like this: newObject.methodName = firstObject.method name. When we will call the method on a new object it will be used correctly.
- To create a reusable method like that, 'this' keyword can be utilised which makes it a very powerful tool.

FUNCTIONS VS ARROW FUNCTIONS
- Object literal DOES NOT create a scope of it's own. Therefore, everyting defined inside the object is located in upper scope.
- When declaring an object method with arrow function, this keyword will not point to object property, instead it will point to upper scope property (since object literals do not create a scope of their own). This will lead to 'undefined' (or worse) when using a method, since the property which this refers to is not defined.
- When creating object methods, use function expressions.
- If we add a function inside the method and then call this function iside the method, 'this' keyword will be 'undefined' instead of object. This happens because of when function call is used in strict mode, 'this' is set to undefined.
- To avoid that there are two ways: 1. we create a variable in which we store the 'this' keyword OUTSIDE the function body and use this variable inside the function. That way, 'this' value will be preserved instead of turning 'undefined'. This is an older method. 2. We use an arrow function instead of FE, since AF do not have their own 'this' keyword and get it from upper scope. This will ensure that it works correctly.
- Arguments keyword is an array-like structure that displays the arguments we passed to function when calling it. It's starts from 0, like an array. This keyword is present only in function declarations and function expressions. Arrow function don't get their arguments list.

PRIMITIVES VS OBJECTS
- Primitive types are stored in EC inside the call stack, and reference types (objects) are stored in memory heap.
- Primitive variables get stored in call stack in a way that each variable gets an identifier with it's name. Then for each variable a memory adress is being reserved, and the value of a variable stores in there. The identifier itself DOES NOT point to it's value but to the memeory ADRESS, which holds the value.
- If we evaluate one variable to the other, the new wariable will not get new memorey adress with same value, but it will just point to the same memory adress.
