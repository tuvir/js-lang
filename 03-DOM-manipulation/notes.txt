DOM MANIPULATION OVERVIEW
- DOM (stands for document object model) can be described as a connection between JS and HTML/CSS. It's a structured representation of HTML documents, which allows us to access HTML/CSS elements and styles to manipulate them with JS code.
- DOM should be seen as a tree where each HTML element is a node, that is interlinked with it's parent element. The first element of the DOM tree is 'Document' which JS has access to.
- HTML element itself and its content are both separate nodes of the DOM tree. The element is a parent and it's content is a child.
- DOM methods and properties are NOT a part of JS. DOM is a so called web API (stands for application programming interface) which browsers include on their own.

SELECTING AND MANIPULATING ELEMENTS
- To select an HTML element in JavaScript file we use 
'document.querySelector()' method in which we pass a class or element name to get access to. Then we can extract the content of an element via different methods, for example, '.textContent' will give us text of the element.
- After selecting the element with 'querySelector' and using submethod to access it's property, we can then change it's value.
- I general JS programming is selecing an element, and assigning a new value to it when the certain condition is met.

HANDLING CLICK EVENTS
- Event is a user activity on the web-page. Then can be a press of a specific button on the page or scroll of the mouse ring. Most of the events have unique names.
- Event listener is a method that we can assign to the selected HTML element where the event will occur. When event listener triggers on specified event it will somehow change the current element or any other elements of the page.
- Event listener accepts the event name as a string as first argument, then it takes the function that will trigger when the event is happend.
- The function that event listener will use can be defined both inside the event listener arguments parenthesis, or otside it. In second case you give its name as an argument, WITHOUT the ending parentheses.
- You can make each '.querySelector' into a variable, to avoid writing the same code multiple times.
- When having an event that should change multiple values of different HTML elements, make event listener function that will call other functions within itself.

IMPLEMENTING GAME LOGIC
- It's always better to store a value (f.e, score) in a variable (thеsе variables are called 'state variables')inside the JS script and then displaying it, rather than taking the value from the DOM, changing it in the script and then displaying it again.

MANIPULATING CSS STYLES
- To change the CSS styles via JS we simply add '.styles' to selected HTML element and the select the style we need. Example: 'document.querySelector('body').style.backgroundColor = '#fff'.
- When writing style names in CSS we write them in lower camel case instead od kebab case.
- When changing CSS with DOM we do not change the actual CSS file? inside these styles are set as inline styles.
- When writing the new value of a CSS property we pass it as a string and the string must contain both value and a unit.
- When working with input fields to change the text inside them we use 'value' submethod instead of 'textContent'

CODE REFACTORING
- When making a first version of a program it's ok to make dirty code, but you should always refactor it in the end, by placing duplicates of code in variables.

SELECTING MULTIPLE HTML ELEMENTS
- When using 'querySelector' to a class that is called on multiple elements, for example, multiple buttons, the method will by default choose only the first element where class name appears.
- To choose all elements with same class name we use 'document.querySelectorAll('.class-name')' method. This method forms a node-list (array-like structure) of all the elements. We can store this node-list in a variable to get access to all of hte buttons at the same time. Inside this loop we can add event liteners that will fo something after we click on each button.

MANIPULATING CLASSES WITH JS
- Common practice in web-development is to assign different classes to HTML elements where each class is responsible for a certain state of the element. These classes are then changed with JS, for example, with eventLiteners.
- Example: we can make a button that on click will open a  window. So we add two classes to this window, default one that will make the window hidden and secondary, that will make it appear. We then assign the toggle of the hidden class to the event listener, that will trigger when the button is clicked.
- The HTML elements that are chosen by 'document.querySelectorAll('')' method should do the same thing. If their purposes are different from one another, we should give them different calss names and work with each one at a time.
- To change the class of selected HTML element we use 'classList' property with desired method that will change the class. Example: element.classList.remove('hidden').
- When typing class name after the method we DO NOT add a dot at the beginig of the class name.
- In general when we need to change the appearance of the page we give certain styles to a class and assign this class to desired element. Then we add or remove this class with event handlers to activate or deactivate specific styles.
- When we have multiple event handlers which are doing the same thing, we call the same named function inside of them.

HANDLING GLOBAL EVENTS
- There are multiple categories of global events. Keyboard events is one of them. To handle global events we use 'addEventListener()' method on a 'document' element (like listening to the whole page).
- There is 3 keyboard events: 'keydown' - single press on the key; 'keyup' - when we stop pressing the key; 'keypress' - when we press and hold the key, this event is triggered continously.
- When eny event on a page happens JS creates an object, that stores the information about this event. We can access this object to check, if the happened evend is which we need. This is useful when we work with global events.
- To look at the event object we need to give a parameter to the event listener function. Syntax: document.addEventListener('keydown', function (e){function body}). This way, when JS will execute this function it will give it the event object as a parameter.

PIG GAME PROJECT
- When adding multiple elements of the same nature, for example, 2 score elements, we can give them same class-name, to style them alike, but to interract with them via JS as diffent elements we give them unique id's, by which we select them with 'document.querySelector('')'.